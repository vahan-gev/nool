Nool {
     Program = (Statement | comment)+
     Statement = VarDecl
    		    | TypeDecl
              | FunDecl
              | Exp7 ("++" | "--") ";"	--bump
              | Exp7 "=" Exp ";" 		--assign
              | Exp7_call ";"			--call
              | break ";"				--break
              | return Exp ";"			--return
              | return ";"				--shortreturn
              | IfStmt
              | LoopStmt
              
     VarDecl = (stat | const) id "=" Exp ";"
     TypeDecl = class id "{" Field* "}"
     Field = id ":" Type ";" --parameter
           | FunDecl --method
     FunDecl = function id Params (":" Type)? Block
     Params = "(" ListOf<Param, ","> ")"
     Param = id ":" Type
    
     Type = "[" Type "]" --array
          | "(" ListOf<Type, ","> ")" ":" Type --function
          | id --id
     
     IfStmt = if "(" Exp ")" Block else Block --long
          | if "(" Exp ")" Block else IfStmt --elseif
               | if "(" Exp ")" Block --short
               
     LoopStmt = quest "(" Exp ")" Block --quest
               | repeat "(" Exp ")" Block --repeat
               | for "(" id in Exp ("..." | "..<") Exp ")" Block --range
               | for "(" id in Exp ")" Block --collection
     Block = "{" Statement* "}"
     
     Exp = Exp1 "?" Exp1 ":" Exp --conditional
          | Exp1
          
     Exp1 = Exp2
          
     Exp2 = Exp3 ("||" Exp3)+ --or
          | Exp3 ("&&" Exp3)+ --and
          | Exp3
          
     Exp3 = Exp4 ("<=" | "<" | "==" | "!=" | ">=" | ">") Exp4 --compare
          | Exp4
     
     Exp4 = Exp4 ("+" | "-") Exp5 --add
          | Exp5
          
     Exp5 = Exp5 ("*" | "/" | "%") Exp6 --multiply
          | Exp6
          
     Exp6 = Exp7 "**" Exp6 --power
          | Exp7
          | (spread | "-" | "!") Exp7        --unary
     
     Exp7 = true ~mut
          | false ~mut
          | floatlit ~mut
          | intlit ~mut
          | stringlit ~mut
          | Exp7_access "(" ListOf<Exp, ","> ")" ~mut --call
          | Exp7_access
          | Type_array "(" ")" ~mut --emptyarray
          | "[" NonemptyListOf<Exp, ","> "]" ~mut --arrayexp
          | "(" Exp ")" ~mut --parens
          
     Exp7_access = Exp7 "." id --member
            | Exp7 "[" Exp "]" --subscript
            | id --id
     
     intlit = digit+
     floatlit = digit+ "." digit+ (("E" | "e") ("+" | "-")? digit+)?
     stringlit = "\"" char* "\""
     
     char        = ~control ~"\\" ~"\"" any
               | "\\" ("n" | "t" | "\"" | "\\")                --escape
          control     = "\x00".."\x1f" | "\x80".."\x9f"
     mut = ~"==" "=" | "++" | "--"
     
     stat = "stat" ~alnum
     const = "const" ~alnum
     class = "class" ~alnum
     function = "skill" ~alnum
     if = "encounter" ~alnum
     else = "fallback" ~alnum
     quest = "quest" ~alnum
     repeat = "repeat" ~alnum
     for = "for" ~alnum
     in = "in" ~alnum
     break = "break" ~alnum
     return = "reward" ~alnum
     spread = "..." ~mut
     true = "true" ~alnum
     false = "false" ~alnum
     keyword = stat | const | class | function | if | else | quest | repeat | for | in | break | return | true | false
     id = ~keyword letter alnum*
     
     comment = "/*" (~"*/" any)* "*/"              --multiLine
     space += "//" (~"\n" any)* --comment
    
}